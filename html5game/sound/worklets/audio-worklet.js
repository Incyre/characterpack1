AudioWorkletProcessor.prototype._A3=function(){this._B3=true;this.port.onmessage=(_C3)=>{if(_C3.data==="kill")this._B3=false;};};class _D3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._A3();}process(_E3,_F3,parameters){const input=_E3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _G3=input[c];for(let _H3=0;_H3<_G3.length;++_H3){const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];
_F3[_I3][c][_H3]=_G3[_H3];}}return this._B3;}}class _J3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._A3();}process(_E3,_F3,parameters){const _K3=_E3[0];const _L3=_E3[1];const output=_F3[0];const gain=parameters.gain;for(let c=0;c<_L3.length;++c){const _G3=_L3[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3)_M3[_H3]=_G3[_H3];}for(let c=0;c<_K3.length;++c){const _G3=_K3[c];const _M3=output[c];
for(let _H3=0;_H3<_G3.length;++_H3){const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];_M3[_H3]+=_G3[_H3]*_N3;}}return this._B3;}}registerProcessor("audio-bus-input",_D3);registerProcessor("audio-bus-output",_J3);class _O3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _P3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._S3=new Float32Array(_R3);this._T3=new Uint32Array(_R3);}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){_M3[_H3]=_G3[_H3];if(this._T3[c]===0)this._S3[c]=_G3[_H3];const _U3=(factor[_H3]!==undefined)?factor[_H3]:factor[0];++this._T3[c];this._T3[c]%=_U3;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];if(_I3>0.0){continue;}let _V3=this._S3[c];const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];_V3*=_N3;_V3=Math.max(Math.min(_V3,
1.0),-1.0);const _W3=(resolution[_H3]!==undefined)?resolution[_H3]:resolution[0];const max=(_V3>0.0)?_O3._P3[_W3]-1:_O3._P3[_W3];_V3=Math.round(_V3*max)/max;const _X3=(mix[_H3]!==undefined)?mix[_H3]:mix[0];_M3[_H3]*=(1.0-_X3);_M3[_H3]+=(_V3*_X3);}}return this._B3;}}registerProcessor("bitcrusher-processor",_O3);class _Y3{constructor(_Z3=1e-3){this.setTime(_Z3);}setTime(_Z3){this.__3=Math.exp(-1/(_Z3*sampleRate));}process(_04,_14){return _04+this.__3*(_14-_04);}}class _24{constructor(_34,_44){this._54=new _Y3(_34);
this._64=new _Y3(_44);this._74=_34;this._84=_44;}_94(_Z3){if(_Z3===this._74)return;this._54.setTime(_Z3);this._74=_Z3;}_a4(_Z3){if(_Z3===this._84)return;this._64.setTime(_Z3);this._84=_Z3;}process(_04,_14){if(_04>_14)return this._54.process(_04,_14);else return this._64.process(_04,_14);}}class _b4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_c4){super();this._A3();const _54=_b4.parameterDescriptors.find(_d4=>_d4.name==="attack");const _64=_b4.parameterDescriptors.find(_d4=>_d4.name==="release");
this._e4=new _24(_54.defaultValue,_64.defaultValue);this._f4=0;}process(_g4,_h4,_i4){const input=_g4[0];const output=_h4[0];const bypass=_i4.bypass;const ingain=_i4.ingain;const outgain=_i4.outgain;const threshold=_i4.threshold;const ratio=_i4.ratio;const attack=_i4.attack;const release=_i4.release;if(input.length===0)return this._B3;for(let _H3=0;_H3<input[0].length;++_H3){let frame=input.map(_j4=>_j4[_H3]);output.forEach((_j4,_k4)=>{_j4[_H3]=frame[_k4];});const _l4=(ingain[_H3]!==undefined)?ingain[_H3]:ingain[0];
frame=frame.map(_m4=>_m4*=_l4);const rect=frame.map(_m4=>Math.abs(_m4));const max=Math.max(...rect);const _n4=_o4(max);const _p4=(threshold[_H3]!==undefined)?threshold[_H3]:threshold[0];const _q4=_o4(_p4);const _r4=Math.max(0,_n4-_q4);const _54=(attack[_H3]!==undefined)?attack[_H3]:attack[0];const _64=(release[_H3]!==undefined)?release[_H3]:release[0];this._e4._94(_54);this._e4._a4(_64);this._f4=this._e4.process(_r4,this._f4);const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];if(_I3>0)continue;const _W3=(ratio[_H3]!==undefined)?ratio[_H3]:ratio[0];
const _s4=(this._f4/_W3)-this._f4;const _N3=_t4(_s4);frame=frame.map(_m4=>_m4*=_N3);const _u4=(outgain[_H3]!==undefined)?outgain[_H3]:outgain[0];frame=frame.map(_m4=>_m4*=_u4);output.forEach((_j4,_k4)=>{_j4[_H3]=frame[_k4];});}return this._B3;}}function _o4(_v4){return 20*Math.log10(_v4);}function _t4(_v4){return Math.pow(10,_v4/20);}registerProcessor("compressor-processor",_b4);class _w4 extends AudioWorkletProcessor{static _x4=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_w4._x4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];const _y4=(_w4._x4*sampleRate)+1;this.buffer=new Array(_R3);this._z4=new Uint32Array(_R3);for(let c=0;c<_R3;++c)this.buffer[c]=new Float32Array(_y4);
}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){_M3[_H3]=_G3[_H3];const _p4=(time[_H3]!==undefined)?time[_H3]:time[0];const _A4=this._B4(c,_p4);const _U3=(feedback[_H3]!==undefined)?feedback[_H3]:feedback[0];const _C4=_G3[_H3]+(_A4*_U3);this.write(c,_C4);const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];
if(_I3>0.0){continue;}const _X3=(mix[_H3]!==undefined)?mix[_H3]:mix[0];_M3[_H3]*=(1-_X3);_M3[_H3]+=(_A4*_X3);}}return this._B3;}_B4(_D4,_Z3){const _E4=_Z3*sampleRate;let _F4=(this._z4[_D4]-~~_E4);let _G4=(_F4-1);while(_F4<0)_F4+=this.buffer[_D4].length;while(_G4<0)_G4+=this.buffer[_D4].length;const frac=_E4-~~_E4;const _H4=this.buffer[_D4][_F4];const _I4=this.buffer[_D4][_G4];return _H4+(_I4-_H4)*frac;}write(_D4,_J4){++this._z4[_D4];this._z4[_D4]%=this.buffer[_D4].length;this.buffer[_D4][this._z4[_D4]]=_J4;
}}registerProcessor("delay-processor",_w4);class _K4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._A3();}process(_L4,_M4,_N4){const input=_L4[0];const _O4=_M4[0];const _P4=_M4[1];for(let c=0;c<input.length;++c){const _G3=input[c];const _Q4=_O4[c];const _R4=_P4[c];for(let _H3=0;_H3<_G3.length;++_H3){_Q4[_H3]=_G3[_H3];_R4[_H3]=_G3[_H3];}}return this._B3;}}class _S4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._A3();}process(_L4,_M4,_N4){const _K3=_L4[0];const _L3=_L4[1];const output=_M4[0];const bypass=_N4.bypass;for(let c=0;c<_L3.length;++c){const _T4=_K3[c];const _U4=_L3[c];const _M3=output[c];for(let _H3=0;_H3<_T4.length;++_H3){const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];if(_I3>0){_M3[_H3]=_U4[_H3];}else {_M3[_H3]=_T4[_H3];}}}return this._B3;}}registerProcessor("eq-input",_K4);registerProcessor("eq-output",_S4);class _V4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._A3();}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){_M3[_H3]=_G3[_H3];const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];
if(_I3>0.0){continue;}const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];_M3[_H3]*=_N3;}}return this._B3;}}registerProcessor("gain-processor",_V4);class _W4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _X4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_X4),minValue:10.0,maxValue:_X4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,
maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._Y4=0;this._Z4=0;this.__4=0;this._05=0;this._15=0;this._25=new Float32Array(_R3);this._35=new Float32Array(_R3);this._45=new Float32Array(_R3);this._55=new Float32Array(_R3);this._65=-1;this._75=-1;this._85=-1;}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _95=(freq.length===1&&q.length===1&&gain.length===1);if(_95)this._a5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){if(_95===false){const _U3=(freq[_H3]!==undefined)?freq[_H3]:freq[0];const _b5=(q[_H3]!==undefined)?q[_H3]:q[0];const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];this._a5(_U3,_b5,_N3);}const _c5=this.__4*_G3[_H3]+this._05*this._25[c]+this._15*this._35[c]-this._Y4*this._45[c]-this._Z4*this._55[c];
this._35[c]=this._25[c];this._25[c]=_G3[_H3];this._55[c]=this._45[c];this._45[c]=_c5;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];_M3[_H3]=(_I3>0)?_G3[_H3]:_c5;}}return this._B3;}_a5(_d5,_e5,_f5){if(_d5===this._65&&_e5===this._75&&_f5===this._85)return;const _g5=2*Math.PI*_d5/sampleRate;const _h5=Math.cos(_g5);const _i5=Math.sqrt(_f5);const _j5=_i5+1;const _k5=_i5-1;const _l5=_j5*_h5;const _m5=_k5*_h5;const _n5=_j5-_m5;const _o5=_j5+_m5;const alpha=Math.sin(_g5)/(2*_e5);const _p5=(2*Math.sqrt(_i5)*alpha);
const _q5=_n5+_p5;const _Y4=2*(_k5-_l5);const _Z4=_n5-_p5;const __4=_i5*(_o5+_p5);const _05=-2*_i5*(_k5+_l5);const _15=_i5*(_o5-_p5);this._Y4=_Y4/_q5;this._Z4=_Z4/_q5;this.__4=__4/_q5;this._05=_05/_q5;this._15=_15/_q5;this._65=_d5;this._75=_e5;this._85=_f5;}}registerProcessor("hi-shelf-processor",_W4);class _r5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _s5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",
automationRate:"a-rate",defaultValue:Math.min(1500.0,_s5),minValue:10.0,maxValue:_s5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._Y4=0;this._Z4=0;this.__4=0;this._05=0;this._15=0;this._25=new Float32Array(_R3);this._35=new Float32Array(_R3);this._45=new Float32Array(_R3);this._55=new Float32Array(_R3);this._t5=-1;this._75=-1;}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];
const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _95=(cutoff.length===1&&q.length===1);if(_95)this._a5(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){if(_95===false){const c=(cutoff[_H3]!==undefined)?cutoff[_H3]:cutoff[0];const _b5=(q[_H3]!==undefined)?q[_H3]:q[0];this._a5(c,_b5);}const _c5=this.__4*_G3[_H3]+this._05*this._25[c]+this._15*this._35[c]-this._Y4*this._45[c]-this._Z4*this._55[c];this._35[c]=this._25[c];
this._25[c]=_G3[_H3];this._55[c]=this._45[c];this._45[c]=_c5;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];_M3[_H3]=(_I3>0)?_G3[_H3]:_c5;}}return this._B3;}_a5(_u5,_e5){if(_u5===this._t5&&_e5===this._75)return;const _g5=2*Math.PI*_u5/sampleRate;const alpha=Math.sin(_g5)/(2*_e5);const _h5=Math.cos(_g5);const _q5=1+alpha;const _Y4=-2*_h5;const _Z4=1-alpha;const __4=(1+_h5)/2;const _05=-1-_h5;const _15=(1+_h5)/2;this._Y4=_Y4/_q5;this._Z4=_Z4/_q5;this.__4=__4/_q5;this._05=_05/_q5;this._15=_15/_q5;this._t5=_u5;
this._75=_e5;}}registerProcessor("hpf2-processor",_r5);class _v5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _X4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_X4),minValue:10.0,maxValue:_X4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}
constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._Y4=0;this._Z4=0;this.__4=0;this._05=0;this._15=0;this._25=new Float32Array(_R3);this._35=new Float32Array(_R3);this._45=new Float32Array(_R3);this._55=new Float32Array(_R3);this._65=-1;this._75=-1;this._85=-1;}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _95=(freq.length===1&&q.length===1&&gain.length===1);
if(_95)this._a5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){if(_95===false){const _U3=(freq[_H3]!==undefined)?freq[_H3]:freq[0];const _b5=(q[_H3]!==undefined)?q[_H3]:q[0];const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];this._a5(_U3,_b5,_N3);}const _c5=this.__4*_G3[_H3]+this._05*this._25[c]+this._15*this._35[c]-this._Y4*this._45[c]-this._Z4*this._55[c];this._35[c]=this._25[c];this._25[c]=_G3[_H3];this._55[c]=this._45[c];
this._45[c]=_c5;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];_M3[_H3]=(_I3>0)?_G3[_H3]:_c5;}}return this._B3;}_a5(_d5,_e5,_f5){if(_d5===this._65&&_e5===this._75&&_f5===this._85)return;const _g5=2*Math.PI*_d5/sampleRate;const _h5=Math.cos(_g5);const _i5=Math.sqrt(_f5);const _j5=_i5+1;const _k5=_i5-1;const _l5=_j5*_h5;const _m5=_k5*_h5;const _n5=_j5-_m5;const _o5=_j5+_m5;const alpha=Math.sin(_g5)/(2*_e5);const _p5=(2*Math.sqrt(_i5)*alpha);const _q5=_o5+_p5;const _Y4=-2*(_k5+_l5);const _Z4=_o5-_p5;const __4=_i5*(_n5+_p5);
const _05=2*_i5*(_k5-_l5);const _15=_i5*(_n5-_p5);this._Y4=_Y4/_q5;this._Z4=_Z4/_q5;this.__4=__4/_q5;this._05=_05/_q5;this._15=_15/_q5;this._65=_d5;this._75=_e5;this._85=_f5;}}registerProcessor("lo-shelf-processor",_v5);class _w5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _s5=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_s5),minValue:10.0,maxValue:_s5}
,{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._Y4=0;this._Z4=0;this.__4=0;this._05=0;this._15=0;this._25=new Float32Array(_R3);this._35=new Float32Array(_R3);this._45=new Float32Array(_R3);this._55=new Float32Array(_R3);this._t5=-1;this._75=-1;}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _95=(cutoff.length===1&&q.length===1);
if(_95)this._a5(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){if(_95===false){const c=(cutoff[_H3]!==undefined)?cutoff[_H3]:cutoff[0];const _b5=(q[_H3]!==undefined)?q[_H3]:q[0];this._a5(c,_b5);}const _c5=this.__4*_G3[_H3]+this._05*this._25[c]+this._15*this._35[c]-this._Y4*this._45[c]-this._Z4*this._55[c];this._35[c]=this._25[c];this._25[c]=_G3[_H3];this._55[c]=this._45[c];this._45[c]=_c5;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];
_M3[_H3]=(_I3>0)?_G3[_H3]:_c5;}}return this._B3;}_a5(_u5,_e5){if(_u5===this._t5&&_e5===this._75)return;const _g5=2*Math.PI*_u5/sampleRate;const alpha=Math.sin(_g5)/(2*_e5);const _h5=Math.cos(_g5);const _q5=1+alpha;const _Y4=-2*_h5;const _Z4=1-alpha;const __4=(1-_h5)/2;const _05=1-_h5;const _15=(1-_h5)/2;this._Y4=_Y4/_q5;this._Z4=_Z4/_q5;this.__4=__4/_q5;this._05=_05/_q5;this._15=_15/_q5;this._t5=_u5;this._75=_e5;}}registerProcessor("lpf2-processor",_w5);class _x5 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _X4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_X4),minValue:10.0,maxValue:_X4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._Y4=0;this._Z4=0;this.__4=0;this._05=0;this._15=0;
this._25=new Float32Array(_R3);this._35=new Float32Array(_R3);this._45=new Float32Array(_R3);this._55=new Float32Array(_R3);this._65=-1;this._75=-1;this._85=-1;}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _95=(freq.length===1&&q.length===1&&gain.length===1);if(_95)this._a5(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _H3=0;
_H3<_G3.length;++_H3){if(_95===false){const _U3=(freq[_H3]!==undefined)?freq[_H3]:freq[0];const _b5=(q[_H3]!==undefined)?q[_H3]:q[0];const _N3=(gain[_H3]!==undefined)?gain[_H3]:gain[0];this._a5(_U3,_b5,_N3);}const _c5=this.__4*_G3[_H3]+this._05*this._25[c]+this._15*this._35[c]-this._Y4*this._45[c]-this._Z4*this._55[c];this._35[c]=this._25[c];this._25[c]=_G3[_H3];this._55[c]=this._45[c];this._45[c]=_c5;const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];_M3[_H3]=(_I3>0)?_G3[_H3]:_c5;}}return this._B3;
}_a5(_d5,_e5,_f5){if(_d5===this._65&&_e5===this._75&&_f5===this._85)return;const _g5=2*Math.PI*_d5/sampleRate;const _h5=Math.cos(_g5);const _i5=Math.sqrt(_f5);const alpha=Math.sin(_g5)/(2*_e5);const _y5=alpha/_i5;const _z5=alpha*_i5;const _q5=1+_y5;const _Y4=-2*_h5;const _Z4=1-_y5;const __4=1+_z5;const _05=_Y4;const _15=1-_z5;this._Y4=_Y4/_q5;this._Z4=_Z4/_q5;this.__4=__4/_q5;this._05=_05/_q5;this._15=_15/_q5;this._65=_d5;this._75=_e5;this._85=_f5;}}registerProcessor("peak-eq-processor",_x5);class _A5{constructor(_B5){
this._C5=0;this._D5=0;this.feedback=0;this._E5=0;this.buffer=new Float32Array(_B5);this._F5=0;}process(_J4){const out=this.buffer[this._F5];this._E5=(this._E5*this._C5)+(out*this._D5);this.buffer[this._F5]=_J4+(this._E5*this.feedback);++this._F5;this._F5%=this.buffer.length;return out;}_G5(_H5){this.feedback=Math.min(Math.max(0,_H5),1);}_I5(_J5){this._C5=Math.min(Math.max(0,_J5),1);this._D5=1-this._C5;}}class _K5{constructor(_B5){this.feedback=0;this.buffer=new Float32Array(_B5);this._F5=0;}process(_J4){
const out=this.buffer[this._F5];this.buffer[this._F5]=_J4+(out*this.feedback);++this._F5;this._F5%=this.buffer.length;return(out-_J4);}_G5(_H5){this.feedback=Math.min(Math.max(0,_H5),1);}}class _L5 extends AudioWorkletProcessor{static _M5=8;static _N5=4;static _O5=0.015;static _P5=0.4;static _Q5=0.28;static _R5=0.7;static _S5=[1116,1188,1277,1356,1422,1491,1557,1617];static _T5=[1139,1211,1300,1379,1445,1514,1580,1640];static _U5=[556,441,341,225];static _V5=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._W5=-1;this._X5=-1;this._Y5=new Array(_R3);this._Z5=new Array(_R3);const __5=[_L5._S5,_L5._T5];const _06=[_L5._U5,
_L5._V5];for(let c=0;c<_R3;++c){this._Y5[c]=new Array(_L5._M5);this._Z5[c]=new Array(_L5._N5);for(let i=0;i<_L5._M5;++i)this._Y5[c][i]=new _A5(__5[c%__5.length][i]);for(let i=0;i<_L5._N5;++i)this._Z5[c][i]=new _K5(_06[c%_06.length][i]);}this._16(0.5);this._I5(0.5);for(let c=0;c<_R3;++c)for(let i=0;i<_L5._N5;++i)this._Z5[c][i]._G5(0.5);}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _G3=input[c];const _M3=output[c];for(let _26=0;_26<_G3.length;++_26){const _H3=(size[_26]!==undefined)?size[_26]:size[0];const _36=(damp[_26]!==undefined)?damp[_26]:damp[0];this._16(_H3);this._I5(_36);_M3[_26]=_G3[_26];let out=0;const _V3=_G3[_26]*_L5._O5;for(let i=0;i<_L5._M5;++i)out+=this._Y5[c][i].process(_V3);for(let i=0;i<_L5._N5;++i)out=this._Z5[c][i].process(out);const _I3=(bypass[_26]!==undefined)?bypass[_26]:bypass[0];if(_I3>0.0){continue;}const _X3=(mix[_26]!==undefined)?mix[_26]:mix[0];
_M3[_26]*=(1-_X3);_M3[_26]+=(out*_X3);}}return this._B3;}_16(_B5){if(_B5===this._W5)return;const size=(_B5*_L5._Q5)+_L5._R5;for(let c=0;c<this._Y5.length;++c)for(let i=0;i<_L5._M5;++i)this._Y5[c][i]._G5(size);this._W5=_B5;}_I5(_J5){if(_J5===this._X5)return;const damp=_J5*_L5._P5;for(let c=0;c<this._Y5.length;++c)for(let i=0;i<_L5._M5;++i)this._Y5[c][i]._I5(damp);this._X5=_J5;}}registerProcessor("reverb1-processor",_L5);class _46 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_Q3){super();this._A3();const _R3=_Q3.outputChannelCount[0];this._56=new Array(_R3).fill(1.0);this._66=new Array(_R3).fill(0.0);
this._76=new Array(_R3).fill(_86._96._a6);this._b6=new Array(_R3);for(let c=0;c<_R3;++c){this._b6[c]=new _c6();this._b6[c]._d6(sampleRate);this._b6[c]._e6(this._56[c]);this._b6[c]._f6(this._76[c]);if(c%2===1){this._b6[c]._g6(this._66[c]);}}}process(_E3,_F3,parameters){const input=_E3[0];const output=_F3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _G3=input[c];
const _M3=output[c];for(let _H3=0;_H3<_G3.length;++_H3){_M3[_H3]=_G3[_H3];const _W3=(rate[_H3]!==undefined)?rate[_H3]:rate[0];const _h6=(offset[_H3]!==undefined)?offset[_H3]:offset[0];const _i6=(shape[_H3]!==undefined)?shape[_H3]:shape[0];this._j6(c,_W3,_h6,_i6);const _k6=this._b6[c]._B4();const _I3=(bypass[_H3]!==undefined)?bypass[_H3]:bypass[0];if(_I3>0.0){continue;}const i=(intensity[_H3]!==undefined)?intensity[_H3]:intensity[0];const out=_G3[_H3]*_k6*i;_M3[_H3]*=(1.0-i);_M3[_H3]+=out;}}return this._B3;
}_j6(_D4,_l6,_m6,_n6){if(_l6!==this._56[_D4]){this._b6[_D4]._e6(_l6);this._56[_D4]=_l6;}if(_m6!==this._66[_D4]){if(_D4%2===1){this._b6[_D4]._g6(_m6);}this._66[_D4]=_m6;}if(_n6!==this._76[_D4]){this._b6[_D4]._f6(_n6);this._76[_D4]=_n6;}}}registerProcessor("tremolo-processor",_46);function _86(){}_86._96={_a6:0,_o6:1,_p6:2,_q6:3,_r6:4,_s6:5};_86._t6=function(_u6){return 1.0-_u6;};_86._v6=function(_u6){return _u6;};_86._w6=function(_u6){return 0.5*(Math.sin((_u6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_86._x6=function(_u6){
if(_u6<0.5){return 0.0;}return 1.0;};_86._y6=function(_u6){if(_u6<0.5){return 2.0*_u6;}return 2.0-(2.0*_u6);};_86._z6=[_86._t6,_86._v6,_86._w6,_86._x6,_86._y6];_A6._B6=512;_A6._C6=1.0/_A6._B6;function _A6(_D6){this.data=new Float32Array(_A6._B6);for(let i=0;i<_A6._B6;++i){this.data[i]=_D6(i*_A6._C6);}}_A6.prototype._B4=function(_u6){_u6=Math.max(0.0,_u6);_u6=Math.min(_u6,1.0);const _E6=_u6*_A6._B6;const _F6=~~_E6;const _G6=_E6-_F6;let _F4=_F6;let _G4=_F4+1;if(_F4>=_A6._B6){_F4-=_A6._B6;}if(_G4>=_A6._B6){_G4-=_A6._B6;
}const _H4=this.data[_F4];const _I4=this.data[_G4];return _H4+(_I4-_H4)*_G6;};_c6._H6=[];_c6._I6=false;_c6._J6=0.0;_c6._X4=20.0;function _c6(){this._K6=48000;this.shape=_86._96._p6;this.freq=1.0;this._L6=0.0;this._C6=0.0;this._M6=0.0;if(_c6._I6==true){return;}for(let i=0;i<_86._96._s6;++i){_c6._H6[i]=new _A6(_86._z6[i]);}_c6._I6=true;}_c6._N6=function(){return(_c6._I6==true);};_c6.prototype._d6=function(_O6){this._K6=_O6;this._P6();};_c6.prototype._e6=function(_d5){_d5=Math.max(_c6._J6,_d5);_d5=Math.min(_d5,
_c6._X4);this.freq=_d5;this._P6();};_c6.prototype._g6=function(_m6){_m6=Math.max(0.0,_m6);_m6=Math.min(_m6,1.0);const _Q6=_m6-this._M6;this._M6=_m6;this._L6+=_Q6;while(this._L6>=1.0){this._L6-=1.0;}while(this._L6<0.0){this._L6+=1.0;}};_c6.prototype._f6=function(_n6){_n6=Math.max(0,_n6);_n6=Math.min(_n6,_86._96._s6-1);this.shape=_n6;};_c6.prototype._B4=function(){const result=_c6._H6[this.shape]._B4(this._L6);this._L6+=this._C6;while(this._L6>=1.0){this._L6-=1.0;}return result;};_c6.prototype._P6=function(){
this._C6=this.freq/this._K6;};